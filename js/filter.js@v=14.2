function path(brand, model, trans, low, hight) {
  var result = "/cars/";
  if (brand != "" && brand != undefined) {
    result += brand + "/?";
  } else {
    result += "?";
  }
  result += "model=" + model + "&";
  // result += "transmission=" + trans + "&";
  result += "low=" + low + "&";
  result += "hight=" + hight;
  result += "#filter--res";
  return result;
}
function getModelByBrand(id) {
  return new Promise((resolve, reject) => {
    $.ajax({
      type: "POST",
      url: "/modules/car/controller/ajax/getModelByFilter.php",
      data: { brand: id },
      cache: false,
      success: function (data) {
        var respons = JSON.parse(data);
        resolve(respons);
      },
    });
  });
}
function getCountByFilteredCars(brand, model, trans, low, hight) {
  return new Promise((resolve, reject) => {
    $.ajax({
      url: "/modules/car/controller/ajax/getCountByFilteredCars.php",
      method: "post",
      dataType: "html",
      data: {
        brand: brand,
        model: model,
        trans: trans,
        low: low,
        hight: hight,
      },
      success: function (data) {
        if (data == "") {
          data = 0;
        }
        resolve(data);
      },
    });
  });
}
function getlistCarMore(brand, model, trans, low, hight, offset, limit) {
  return new Promise((resolve, reject) => {
    $.ajax({
      type: "GET",
      url: "/modules/car/controller/ajax/getMoreCars.php",
      data: {
        brand: brand,
        model: model,
        trans: trans,
        low: low,
        hight: hight,
        offset: offset,
        limit: limit,
      },
      cache: false,
      success: function (data) {
        var response = JSON.parse(data);
        resolve(response);
      },
    });
  });
}
var filterData = {
  brand: 0,
  model: 0,
  trans: 0,
  low: 0,
  hight: 0,
  brandName: "",
};
class Special {
  brand = "";
  brandId = "";
  model = "";
  art = "";
  mod = "";
  conf = "";
  price = "";
  payment = "";
  url = "";
  id = "";
  modconfId = "";

  constructor(obj) {
    this.brand = obj.brand.name.toUpperCase();
    this.brandId = obj.brand.id;
    this.model = obj.car.model;
    this.modelId = obj.car.id;
    this.art = `/static/imgSpc/${obj.id}/${obj.art}?v=${obj.atr.version}`;
    this.mod = obj.modconf.modification.name;
    this.conf = obj.modconf.config.name;
    this.price = Number(obj.diff).toLocaleString("ru");
    this.payment = Math.trunc(Number(obj.payment)).toLocaleString("ru");
    this.url = obj.car.urlname;
    this.id = obj.id;
    this.modconfId = obj.modconf.id;
    this.oldPrice = Number(obj.price).toLocaleString("ru");
    this.ecom = obj.diff.toString().slice(0, -3);
  }

  cardCar(formId) {
    return `
      <div class="card card__special">
        <a href="/cars/${this.brand.toLowerCase()}/${this.url}/${this.id}/"
          class="card__special-img">
          <h3 data-bs-toggle="tooltip" data-bs-placement="top" title="${this.brand} ${this.model}" class="card__special-name">
            ${this.brand} ${this.model}
          </h3>
          <img src="${this.art}" height="167" width="225"
            alt="Превью ${this.brand} ${this.model}">
        </a>
        <a href="/cars/${this.brand.toLowerCase()}/${this.url}/${this.id}/"
          class="card__special-top">
          <p class="card__special-mod">
            ${this.conf}
          </p>
          <p data-bs-toggle="tooltip" data-bs-placement="top" title="${this.mod}" class="card__special-config">
            ${this.mod}
          </p>
          <span class="card__price-main">от
            ${this.price} руб.
          </span>
          <p class="card__price-credit">Кредит от 
          <span>${this.payment} ₽/мес.</span>
          </p>
        </a>
        <button class="card__btn credit__button" type="button"
          data-send_form="${formId}"
          data-brand_id="${this.brandId}"
          data-brand="${this.brand}"
          data-model="${this.model}"
          data-id="${this.modelId}"
          data-config="${this.modconfId}"
          data-price="${this.price}"
          data-foto="${this.art}"
          data-ecom="${this.ecom}"
          data-bs-toggle="modal" data-bs-target="#modal--credit">Купить в кредит
        </button>
      </div>
    `;
  }
}

$(document).ready(function () {
  $(".btn-more").attr("data-offset", 8);

  $(".filter__brand").on("change", function () {
    filterData.brand = $(this).val();
    filterData.model = 0;
    filterData.trans = 0;
    filterData.brandName = $(this).find("option:selected").data("text").toLowerCase();

    $(".filter__model").html(new Option("Модель", "0", true, true));
    $(".filter__model, .filter__trans").removeAttr("disabled");

    $(".btn-more").attr("data-brand", $(this).val());

    if ($(this).val() == 0) {
      $(".filter__model").attr("disabled", "");
    } else {
      $(".filter__model").removeAttr("disabled");

      getModelByBrand(filterData.brand).then((data) => {
        listOption = [];
        data.forEach(function (item, i) {
          listOption.push(new Option(item.model, item.id, false, false));
        });
        $(".filter__model").append(listOption);
      });
    }

    getCountByFilteredCars(
      filterData.brand,
      filterData.model,
      filterData.trans,
      filterData.low,
      filterData.hight
    ).then((data) => {
      $(".filter__count").html(data);
      $(".filter__btn").html(`Найдено ${data} авто`);
      $(".btn-more").attr("data-count", data);
      if (data < 9) {
        $(".btn-more").hide();
      }
      (data == 0) ?
        $(".filter__btn").attr("disabled", "") :
        $(".filter__btn").removeAttr("disabled");
    });
  });

  $(".filter__model").on("change", function () {
    filterData.model = $(this).val();
    $(".btn-more").attr("data-model", $(this).val());

    getCountByFilteredCars(
      filterData.brand,
      filterData.model,
      filterData.trans,
      filterData.low,
      filterData.hight
    ).then((data) => {
      $(".filter__count").html(data);
      $(".filter__btn").html(`Найдено ${data} авто`);
      $(".btn-more").attr("data-count", data);
      if (data < 9) {
        $(".btn-more").hide();
      }
      if (data == 0) {
        $(".btn-more").hide();
        $(".filter__btn")
          .html(`Авто не найдено`)
          .attr("disabled", "");
      } else {
        $(".filter__btn")
          .html(`Найдено ${data} авто`)
          .removeAttr("disabled");
      }
    });
  });

  let delayTimer;
  $(".filter__input").on("keyup", function () {
    filterData.trans = $(".filter__trans").val();
    filterData.low = $(".filter__low").val();
    filterData.hight = $(".filter__hight").val();

    $(".btn-more")
      .attr("data-trans", filterData.trans)
      .attr("data-low", filterData.low)
      .attr("data-hight", filterData.hight);

    clearTimeout(delayTimer);
    delayTimer = setTimeout(function () {
      getCountByFilteredCars(
        filterData.brand,
        filterData.model,
        filterData.trans,
        filterData.low,
        filterData.hight
      ).then((data) => {
        $(".filter__count").html(data);
        $(".filter__btn").html(`Найдено ${data} авто`);
        $(".btn-more").attr("data-count", data);
        if (data < 9) {
          $(".btn-more").hide();
        }
        if (data == 0) {
          $(".btn-more").hide();
          $(".filter__btn")
            .html(`Авто не найдено`)
            .attr("disabled", "");
        } else {
          $(".filter__btn")
            .html(`Найдено ${data} авто`)
            .removeAttr("disabled");
        }
      });
    }, 500);

    $(".btn-more")
      .attr("data-trans", filterData.trans)
      .attr("data-low", filterData.low)
      .attr("data-hight", filterData.hight);
  });

  $(".filter__input").on("keypress", function () {
    return event.charCode >= 48 && event.charCode <= 57;
  });
});
